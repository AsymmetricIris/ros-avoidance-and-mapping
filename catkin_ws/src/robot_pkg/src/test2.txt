#! /usr/bin/env python
import rospy
from geometry_msgs.msg import Point, Twist
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
#from srv_examples.srv import SetBool, SetBoolResponse
from srv_examples.srv import Approach, ApproachResponse
pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
vel = Twist()


class robot:
    def __init__(self):
        pass
    def callback(self, msg):
        print(msg.ranges[0])
        #global Distance
        self.Distance = msg.ranges[0]
        self.motion_planning()

    def callback_function(self, service_request):
        #global lidar_angle
        self.lidar_angle = service_request.lidar_angle
        self.service_response = ApproachResponse()
        self.Approach_Distance = service_request.approach_distance
        self.Approach_Velocity = service_request.approach_velocity
        print("Start")
        

    def motion_planning(self):
        if self.Distance < self.Approach_Distance:
            print(
                'the move_service server recieved a "True" request, the robot will now move for 5 seconds...')

            #StartTime = rospy.get_rostime()
            vel.linear.x = 0.0
            pub.publish(vel)
            self.service_response.response_message = 'Stopping'
            rospy.loginfo('Published the velocity command to /cmd_vel')
            print(self.Distance, " : Stopped")
        else:
            #service_response.boolean_response = False
            vel.linear.x = self.Approach_Velocity
            pub.publish(vel)
            self.service_response.response_message = 'Going Forward'
            print(self.Distance, " : Going Forward")

        return self.service_response

if __name__ == '__main__':
    rospy.init_node('move_service_server')
    a = robot()
    my_service = rospy.Service('/move_service', Approach, a.callback_function)
    sub = rospy.Subscriber('/scan', LaserScan, a.callback)
    
    rospy.loginfo('the move_service server is ready to be called...')
    rospy.spin()
